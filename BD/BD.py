import psycopg2
class BD:
    def __init__(self,settings,user):
        try:
            self.con = psycopg2.connect(host=settings["hostBD"], database=settings["database"],  user=user, password=settings["passwordDb"])
            self.cur = self.con.cursor()
            self.criarTabelas()

        except Exception as e:
            print("BD: " + e.__str__())



    def criarTabelas(self):
        self.create("""
                           CREATE TABLE IF NOT EXISTS Vocations (
                                   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   nome TEXT NOT NULL   
                           );
                           """)
        self.create("""
                           CREATE TABLE IF NOT EXISTS World (
                                   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   nome TEXT NOT NULL   
                           );
                           """)

        self.create("""
                                   CREATE TABLE IF NOT EXISTS Guild (
                                           id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                           nome TEXT NOT NULL,
                                           worldId INTEGER NOT NULL,
                                           FOREIGN KEY(worldId) REFERENCES World(id)
                                   );
                                   """)

        self.create("""
                                           CREATE TABLE IF NOT EXISTS GuildAmiga (
                                                   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,                                       
                                                   guildId INTEGER NOT NULL,
                                                   FOREIGN KEY(guildId) REFERENCES Guild(id)
                                           );
                                           """)

        self.create("""
                                                CREATE TABLE IF NOT EXISTS GuildInimiga(
                                                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,                                          
                                                        guildId INTEGER NOT NULL,
                                                        FOREIGN KEY(guildId) REFERENCES Guild(id)
                                                );
                                                """)

        self.create("""
                                              CREATE TABLE IF NOT EXISTS Character (
                                                      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                                      nome TEXT NOT NULL,
                                                      level INTEGER NOT NULL,
                                                      online INTEGER NOT NULL,                             
                                                      vocationId INTEGER NOT NULL,  
                                                      guildId INTEGER,                                  
                                                      worldId INTEGER NOT NULL,
                                                      ultimaMorte TEXT NOT NULL,                                
                                                      ultimaMorteMobOuPlayer INTEGER NOT NULL,
                                                      ultimaMorteNotificada INTEGER NOT NULL,                             
                                                      FOREIGN KEY(worldId) REFERENCES World(id),
                                                      FOREIGN KEY(vocationId) REFERENCES Vocations(id),
                                                      FOREIGN KEY(guildId) REFERENCES Guild(id)
                                              );
                                              """)

        self.create("""
                                                CREATE TABLE IF NOT EXISTS CharacterAmigo (
                                                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,                                           
                                                        characterId INTEGER NOT NULL,
                                                        FOREIGN KEY(characterId) REFERENCES Character(id)
                                                );
                                                """)

        self.create("""
                                                CREATE TABLE IF NOT EXISTS CharacterInimigo (
                                                        id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,                                          
                                                        characterId INTEGER NOT NULL,
                                                        FOREIGN KEY(characterId) REFERENCES Character(id)
                                                );
                                                """)


        self.create("""
                                                CREATE TABLE IF NOT EXISTS usuarioTS
                                        (
                                            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            nomeTS text NOT NULL,
                                            idCharacterMain integer NOT NULL,
                                            idmakers integer[],
                                            uIdUsuario text NOT NULL,                                            
                                            FOREIGN KEY(idCharacterMain) REFERENCES Character(id)
                                        );""")


    def insert(self,sql):
        self.cursor().execute(sql+" RETURNING id")
        self.con.commit()
        id = self.cursor().fetchone()
        if (id is None):
            return None
        else:
            return id[0]

    def select(self,sql):
        self.cursor().execute(sql)
        return self.cursor().fetchall()

    def update(self,sql):
        self.cursor().execute(sql)
        self.con.commit()
        return True

    def delete(self,sql):
        self.cursor().execute(sql+" RETURNING id")
        self.con.commit()
        id=self.cursor().fetchone()
        if(id is None):
            return None
        else:
            return id[0]

    def create(self,sql):
        self.cursor().execute(sql)
        self.con.commit()

    def cursor(self):
        return self.cur

    def get(self):
        return self.con

    def close(self):
        self.con.close()

    def commit(self):
        self.con.commit()